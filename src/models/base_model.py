"""Base Model Abstraction

Defines the abstract base class that all models should inherit from,
providing a consistent interface for fit, predict, and save operations.

Author: Generated by Comet Assistant
Version: 1.0.0
"""
from __future__ import annotations

import abc
import pickle
from pathlib import Path
from typing import Any


class BaseModel(abc.ABC):
    """Abstract base class for models used in the engine."""

    @abc.abstractmethod
    def fit(self, data: Any, **kwargs) -> "BaseModel":
        """Train the model.
        Args:
            data: Preprocessed training data
        Returns:
            Self
        """
        raise NotImplementedError

    @abc.abstractmethod
    def predict(self, data: Any, **kwargs) -> Any:
        """Generate predictions for the given data."""
        raise NotImplementedError

    def save(self, path: Path | str) -> None:
        """Persist the model to disk with pickle by default."""
        path = Path(path)
        path.parent.mkdir(parents=True, exist_ok=True)
        with path.open("wb") as f:
            pickle.dump(self, f)

    @classmethod
    def load(cls, path: Path | str) -> "BaseModel":
        """Load a pickled model from disk."""
        path = Path(path)
        with path.open("rb") as f:
            obj = pickle.load(f)
        if not isinstance(obj, cls):
            raise TypeError(f"Loaded object is not instance of {cls.__name__}")
        return obj
